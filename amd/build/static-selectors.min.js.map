{"version":3,"file":"static-selectors.min.js","sources":["../src/static-selectors.js"],"sourcesContent":["// static-selectors.js\nimport {dropDownTemplate} from \"./templates\";\nimport {get_string as getString} from 'core/str';\n\n// Per-instance state\nconst instances = {};\n\nexport const setInstanceId = (id) => {\n  if (!instances[id]) {\n    instances[id] = {\n      root: document.getElementById('id-' + id),\n      dropDownData: null,\n      filterState: {\n        QUERY: null,\n        CURRENT_PAGE: 0,\n        PAGE_SIZE: 12,\n        ORDER: null,\n      }\n    };\n    for (const key in FIELD_FILTER_MAP) {\n      instances[id].filterState[FIELD_FILTER_MAP[key]] = null;\n    }\n  }\n  currentInstance = instances[id];\n};\n\nlet currentInstance = null; // active instance context\n\nconst getInstance = (id) => instances[id];\n\nexport const getElement = (id, selector) => {\n  const instance = getInstance(id);\n  if (!instance?.root) {\n    console.warn(\"No instance root set. Call setInstanceId(id) first.\");\n    return null;\n  }\n  return instance.root.querySelector(`#${selector}`);\n};\n\nexport const initDropDownData = (data) => {\n  currentInstance.dropDownData = data;\n};\n\nexport const getFilterState = () => currentInstance.filterState;\n\nexport const updateFilterState = (type, param) => {\n  const filterState = currentInstance.filterState;\n  if (param === null) return false;\n  const state = filterState[type];\n  if (state !== param) {\n    filterState.CURRENT_PAGE = 0;\n    filterState[type] = param;\n    return true;\n  }\n  return false;\n};\n\nconst resetFilterStateByType = (type) => {\n  if (currentInstance.filterState[type] === null) return false;\n  currentInstance.filterState[type] = null;\n  return true;\n};\n\nexport const prepareDropDowns = async(handleFilter, activeFilters, triggeredFilter, reset = false) => {\n  const dropdownContainer = getElement(SELECTORS.DROPDOWN_CONTAINER);\n  const dropDowns = [];\n  for (const filter of currentInstance.dropDownData) {\n    const selectedOption = currentInstance.filterState[FIELD_FILTER_MAP[filter.name]];\n    const defaultOption = selectedOption !== null ? filter.options.find(opt => opt.id == selectedOption) : null;\n\n    if (activeFilters && triggeredFilter) {\n      const activeFilter = activeFilters.find(af => af.name === filter.name);\n      filter.options.forEach(option => {\n        if (filter.name === triggeredFilter && !reset) return;\n        const match = activeFilter?.options.find(of => of.name === option.name);\n        option.disabled = match === undefined;\n      });\n    }\n\n    const caption = await getString(FIELD_FILTER_MAP[filter.name].toLowerCase() + 'filtercaption', 'block_mat_explorer');\n    const dropDown = dropDownTemplate({\n      title: caption,\n      caption: defaultOption?.name || caption,\n      options: filter.options,\n      selectedOption: defaultOption,\n      onOptionChange: (optionId) => {\n        if (updateFilterState(FIELD_FILTER_MAP[filter.name], optionId)) {\n          const filteredCourses = handleFilter();\n          const filters = getFiltersFromTargets(filteredCourses);\n          prepareDropDowns(handleFilter, filters, filter.name);\n        }\n      },\n      onReset: () => {\n        if (resetFilterStateByType(FIELD_FILTER_MAP[filter.name])) {\n          const filteredCourses = handleFilter();\n          const filters = getFiltersFromTargets(filteredCourses);\n          prepareDropDowns(handleFilter, filters, filter.name, true);\n        }\n      },\n      className: \"mat-dropdown-\" + filter.name.toLowerCase(),\n    });\n    dropDowns.push(dropDown);\n  }\n  $(dropdownContainer).empty().append(dropDowns);\n};\n\nexport const updateMainContainer = (elements) => {\n  const mainContainer = getElement(SELECTORS.MAIN_CONTAINER);\n  $(mainContainer).empty().append(elements);\n};\n\nexport const initiateSearch = (handleFilter) => {\n  const searchInput = getElement(SELECTORS.SEARCH_INPUT);\n  const clearButton = getElement(SELECTORS.SEARCH_CLEAR_BUTTON);\n\n  searchInput.addEventListener(\"keyup\", (e) => {\n    if (updateFilterState(FILTER_TYPES.QUERY, e.target.value)) {\n      handleFilter(getFilterState());\n    }\n  });\n\n  clearButton.addEventListener(\"click\", () => {\n    searchInput.value = \"\";\n    if (updateFilterState(FILTER_TYPES.QUERY, \"\")) {\n      handleFilter(getFilterState());\n    }\n  });\n};\n\nexport const updateCourseCount = async(count) => {\n  const courseCount = getElement(SELECTORS.COURSE_COUNT);\n  const caption = await getString(count !== 1 ? 'coursecountcaption' : 'coursecountonecaption', 'block_mat_explorer');\n  courseCount.innerHTML = `${count || \"0\"} ${caption}`;\n};\n\nexport const prepareSortDropdown = async(handleFilter) => {\n  const container = getElement(SELECTORS.SORT_DROPDOWN_CONTAINER);\n  const options = Object.entries(SORT_TYPES).map(([id, { name }]) => ({ id, name }));\n  const selected = currentInstance.filterState.ORDER;\n  const defaultOption = selected ? options.find(o => o.id === selected) : null;\n  const caption = await getString('sortcaption', 'block_mat_explorer');\n\n  const sortDropDown = await dropDownTemplate({\n    title: caption,\n    caption: defaultOption?.name || caption,\n    options,\n    selectedOption: defaultOption,\n    onOptionChange: (optionId) => {\n      if (updateFilterState(FILTER_TYPES.ORDER, optionId)) {\n        handleFilter();\n        prepareSortDropdown(handleFilter);\n      }\n    },\n    onReset: () => {\n      if (resetFilterStateByType(FILTER_TYPES.ORDER)) {\n        handleFilter();\n        prepareSortDropdown(handleFilter);\n      }\n    }\n  });\n\n  $(container).empty().append(sortDropDown);\n};\n\n// Constants\nexport const SELECTORS = {\n  MAIN_WRAPPER: \"matMainWrapper\",\n  MAIN_CONTAINER: \"matMainContainer\",\n  DROPDOWN_CONTAINER: \"matDropDownContainer\",\n  LOADING_CONTAINER: \"matLoadingContainer\",\n  SEARCH_INPUT: \"matSearchInput\",\n  SEARCH_CLEAR_BUTTON: \"matClearSearch\",\n  COURSE_COUNT: \"matCourseCount\",\n  TOP_PAGINATION_CONTAINER: \"matTopPaginationContainer\",\n  BOTTOM_PAGINATION_CONTAINER: \"matBottomPaginationContainer\",\n  SORT_DROPDOWN_CONTAINER: \"matSortContainer\",\n  COURSE_DETAIL_MODAL: \"mat_modal\",\n};\n\nexport const FILTER_TYPES = {\n  QUERY: \"QUERY\",\n  CATEGORY: \"CATEGORY\",\n  TOPICS: \"TOPICS\",\n  TARGET_GROUP: \"TARGET_GROUP\",\n  CURRENT_PAGE: \"CURRENT_PAGE\",\n  ORDER: \"ORDER\",\n};\n\nexport const FIELD_FILTER_MAP = {\n  category: \"CATEGORY\",\n  mc_moodle_themen: \"TOPICS\",\n  mc_moodle_zielgruppe: \"TARGET_GROUP\",\n};\n\nexport const SORT_TYPES = {\n  alphabetASC: { field: \"title\", direction: 1, name: \"Alphabetisch aufsteigend\" },\n  alphabetDESC: { field: \"title\", direction: -1, name: \"Alphabetisch absteigend\" },\n  mcOriginalDESC: { field: \"MCOriginal\", direction: -1, name: \"MINT-Campus-Original zuerst\" },\n  favouritesDESC: { field: \"favourite\", direction: -1, name: \"Favoriten zuerst\" },\n};\n\ngetString('sortalphabetasc', 'block_mat_explorer').then(str => SORT_TYPES.alphabetASC.name = str);\ngetString('sortalphabetdesc', 'block_mat_explorer').then(str => SORT_TYPES.alphabetDESC.name = str);\ngetString('sortmcoriginaldesc', 'block_mat_explorer').then(str => SORT_TYPES.mcOriginalDESC.name = str);\ngetString('sortfavouritesdesc', 'block_mat_explorer').then(str => SORT_TYPES.favouritesDESC.name = str);\n\nconst getEmptyFilters = (keys) => keys.map((key) => ({ name: key, options: [] }));\n\nconst getFilterOptionsFromTargetsByKey = (key, targets) => {\n  const optionsCount = {};\n  for (const target of targets) {\n    const field = target[key];\n    if (!field) continue;\n    const items = Array.isArray(field) ? field : [field];\n    for (const item of items) {\n      if (!item?.id) continue;\n      if (optionsCount[item.id]) {\n        optionsCount[item.id].count++;\n      } else {\n        optionsCount[item.id] = { count: 1, value: item.value };\n      }\n    }\n  }\n  return Object.entries(optionsCount).map(([id, { count, value }]) => ({ id, name: value, count }))\n    .sort((a, b) => a.name.localeCompare(b.name));\n};\n\nexport const getFiltersFromTargets = (targets) => {\n  const keys = Object.keys(FIELD_FILTER_MAP);\n  const filters = getEmptyFilters(keys);\n  for (const filter of filters) {\n    filter.options = getFilterOptionsFromTargetsByKey(filter.name, targets);\n  }\n  return filters;\n};\n"],"names":["instances","id","root","document","getElementById","dropDownData","filterState","QUERY","CURRENT_PAGE","PAGE_SIZE","ORDER","key","FIELD_FILTER_MAP","currentInstance","getElement","selector","instance","getInstance","querySelector","console","warn","data","getFilterState","updateFilterState","type","param","resetFilterStateByType","prepareDropDowns","async","handleFilter","activeFilters","triggeredFilter","reset","dropdownContainer","SELECTORS","DROPDOWN_CONTAINER","dropDowns","filter","selectedOption","name","defaultOption","options","find","opt","activeFilter","af","forEach","option","match","of","disabled","undefined","caption","toLowerCase","dropDown","title","onOptionChange","optionId","filteredCourses","filters","getFiltersFromTargets","onReset","className","push","$","empty","append","elements","mainContainer","MAIN_CONTAINER","searchInput","SEARCH_INPUT","clearButton","SEARCH_CLEAR_BUTTON","addEventListener","e","FILTER_TYPES","target","value","courseCount","COURSE_COUNT","count","innerHTML","prepareSortDropdown","container","SORT_DROPDOWN_CONTAINER","Object","entries","SORT_TYPES","map","_ref","selected","o","sortDropDown","MAIN_WRAPPER","LOADING_CONTAINER","TOP_PAGINATION_CONTAINER","BOTTOM_PAGINATION_CONTAINER","COURSE_DETAIL_MODAL","CATEGORY","TOPICS","TARGET_GROUP","category","mc_moodle_themen","mc_moodle_zielgruppe","alphabetASC","field","direction","alphabetDESC","mcOriginalDESC","favouritesDESC","then","str","getFilterOptionsFromTargetsByKey","targets","optionsCount","items","Array","isArray","item","_ref2","sort","a","b","localeCompare","keys","getEmptyFilters"],"mappings":"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"}